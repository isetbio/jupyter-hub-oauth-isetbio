#!/bin/bash
#
# This script exists to help you configure Jupyter Hub with OAuth.
# It works with the ninjaben/jupyter-hub-oauth-isetbio Docker image.
# The idea is that all of the generic, reusable config lives in the jupyter-hub-oauth-isetbio Dockerfile.
# And all of the site-specific config, like ssl and users, goes in this script.
#
# You should be able to copy this script, edit with your site-specific config, and run it.  Donezo!
#
# Or you could just treat this script as documentation for how to mount in site-specific
# config for the ninjaben/jupyter-hub-oauth-isetbio image.  You do you!
#
# 17 May 2016
# benjamin.heasly@gmail.com


# A folder to contain all this site-specific config.
mkdir -p ~/jupyter-hub-oauth-isetbio/site-config
cd ~/jupyter-hub-oauth-isetbio/site-config
WORKING=`pwd`


# Build a userlist file with one line per user.
# Lines ending with "admin" declare admin users.  Like you!
echo "you@gmail.com admin" > $WORKING/userlist
echo "another.user@gmail.com" >> $WORKING/userlist


# Build an environment file with OAuth info.
# Pro tip (which I just learned): Use "lvh.me" domain for local testing.
# It's DNS magic that points back at localhost.
echo "OAUTH_CALLBACK_URL=https://lvh.me/hub/oauth_callback" > $WORKING/env-file

# You can get CLIENT_ID and CLIENT_SECRET from your Google dev console
# https://console.developers.google.com/apis/credentials
echo "OAUTH_CLIENT_ID=" >> $WORKING/env-file
echo "OAUTH_CLIENT_SECRET=" >> $WORKING/env-file


# Make a self-signed ssl certificate in ssl/.
# Or you can put a real certificate and key in there.
SSL=$WORKING/ssl
if ! [ -d "$SSL" ]; then
  mkdir $SSL

  openssl req -new -newkey rsa:2048 \
  -rand /dev/urandom -nodes \
  -keyout $SSL/ssl.key \
  -out $SSL/jupyter.csr \
  -subj "/C=US/ST=YourState/L=YourLocale/O=YourOrganization/OU=YourDepartment/CN=your.domain"
  openssl x509 -req -days 365 -in $SSL/jupyter.csr -signkey $SSL/ssl.key -out $SSL/ssl.crt
fi


# Config to mount in Matlab.
MATLAB_ROOT=/usr/local/MATLAB/R2016a
MATLAB_LOGS=$WORKING
MATLAB_MAC_ADDRESS="00:00:00:00:00:00"

# Launch JupyterHub!
# Server port must match the port above in OAUTH_CALLBACK_URL.  443 is default for HTTPS.
# Mount this working folder into the container at /var/jupyter
# Pass in the env-file with OAuth gonfig
PORT=443
sudo docker run -p $PORT:$PORT \
 -v $MATLAB_ROOT:/usr/local/MATLAB/from-host \
 -v $MATLAB_LOGS:/var/log/matlab \
 -v $WORKING:/var/jupyter \
 --env-file=$WORKING/env-file \
 --mac-address=$MATLAB_MAC_ADDRESS \
 -t -i ninjaben/jupyter-hub-oauth-isetbio --port $PORT

